function insertionSort(arr, left, right) {          // Функция сортировки вставками
    for (let i = left + 1; i <= right; i++) {
        let j = i;
        const key = arr[j];
							// происходит сортировка вставками
        while (j > left && arr[j - 1] > key) {
            arr[j] = arr[j - 1];
            j--;
        }
        arr[j] = key;
    }
}

								// Функция слияния двух подмассивов
function merge(arr, l, m, r) {
    const len1 = m - l + 1, len2 = r - m;
    const left = new Array(len1);
    const right = new Array(len2);
								// Копирование элементов в подмассивы left и right

    for (let x = 0; x < len1; x++) left[x] = arr[l + x];
    for (let x = 0; x < len2; x++) right[x] = arr[m + 1 + x];

    let i = 0, j = 0, k = l;

								// Слияние отсортированных подмассивов
while (i < len1 && j < len2) {
    if (left[i] <= right[j]) {
        arr[k] = left[i];
        i++;
    } else {
        arr[k] = right[j];
        j++;
    }
    k++;
}

								 // Добавление оставшихся элементов из left и right 
while (i < len1) {
    arr[k] = left[i];
    k++;
    i++;
}

while (j < len2) {
    arr[k] = right[j];
    k++;
    j++;
}

}

						//  функция сортировки TimSort
function timSort(arr) {
    const n = arr.length;
						// Сортировка вставками для каждого подмассива размером RUN
    for (let i = 0; i < n; i += RUN) {
        insertionSort(arr, i, Math.min(i + RUN - 1, n - 1));
    }

							  // Слияние подмассивов
    for (let size = RUN; size < n; size = 2 * size) {
        for (let left = 0; left < n; left += 2 * size) {
            const mid = left + size - 1;
            const right = Math.min(left + 2 * size - 1, n - 1);

								 // Если mid < right, то сливаем подмассивы
            if (mid < right) {
                merge(arr, left, mid, right);
            }
        }
    }
}


const arr = [5, 21, 7, 23, 19];
timSort(arr);
console.log(arr.join(" "));
